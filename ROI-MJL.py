# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from roigui import Ui_MainWindow
from PyQt5.QtWidgets import *
from PyQt5 import QtCore, QtGui, QtWidgets
import sys
from autoSeg import Pred
import SimpleITK as sitk
import numpy as np
import matplotlib.pyplot as plt
import os
from os.path import join
from natsort import natsorted,ns
from PyQt5.QtCore import pyqtSlot
import shutil
import pandas as pd
from MyFigureCanvas import MplCanvas
import cv2
from MyFigureCanvas import MplCanvas,ImageReader
from PyQt5.QtGui import QPixmap,QWheelEvent
import io
from PIL import Image
import csv
from matplotlib.colors import ListedColormap
from scipy import ndimage


class TIC(QMainWindow,Ui_MainWindow):
    def __init__(self):
        super(TIC,self).__init__()


        self.setupUi(self)
        self.setWindowTitle('ASCSyn')
        self.setFixedSize(838, 756)

        self.F1 = MplCanvas()
        self.gridlayout = QGridLayout(self.frame)
        self.gridlayout.addWidget(self.F1)

        self.F2 = MplCanvas()
        self.gridlayout = QGridLayout(self.frame_2)
        self.gridlayout.addWidget(self.F2)

        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(466, 466, 331, 191))
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")

        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(120, 420, 86, 25))
        self.comboBox.setObjectName("comboBox")
       # self.comboBox.activated[str].connect(self.change_folder)

        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(10, 460, 360, 200))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setHorizontalHeaderLabels(["各型血管翳所占面积与百分比"])
        self.tableWidget.setColumnCount(3)
        self.tableWidget.setRowCount(5)
        self.tableWidget.hide()
        self.horizontalSlider = QtWidgets.QSlider(self.centralwidget)
        self.horizontalSlider.setGeometry(QtCore.QRect(280, 430, 81, 16))
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.horizontalSlider.setMinimum(0)
        self.horizontalSlider.setMaximum(100)
        self.horizontalSlider.setValue(50)
        self.horizontalSlider.valueChanged.connect(self.update_opacity)

        self.Preder = Pred()
        self.Preder.load_model('model/best_metric_model.pth')

        # self.pushButton.clicked.connect(self.caculate)
        self.openmri.triggered.connect(self.get_imgDir)
       # self.run.triggered.connect(self.get_imagePathList)
        self.run.triggered.connect(self.process_image)
        self.exit.triggered.connect(self.Exit)
        self.action1.triggered.connect(self.tabel)
        self.action2.triggered.connect(self.piechart)
        self.save.triggered.connect(self.save_img)
        self.action.triggered.connect(self.on_save_button_clicked)
        self.action_2.triggered.connect(self.save_piechart)
        self.Open_mask.triggered.connect(self.get_mask)
        self.Instructions.triggered.connect(self.show_instructions)
        self.actionSegmentation.triggered.connect(self.predict)

        self.slice=0

    def predict(self):
        dirs=os.listdir(self.imgDir)
        folder_path = os.path.join(self.imgDir,dirs[3])

        self.Preder.load_image(image_path=folder_path)
        self.Preder.start()
        self.Preder._signal1.connect(self.call1_backlog)


    def call1_backlog(self):
        pred_data = self.Preder.pred_data
        self.pred_data = pred_data

        self.pred_data = ndimage.zoom(self.pred_data,zoom=(1,1.25,1.25),order=0)
        self.pred_data[self.pred_data < 0.5] = 0
        self.pred_data[self.pred_data > 0.5] = 1
      #  print(self.pred_data.shape)



    def show_instructions(self):
        msg = QMessageBox()
        msg.setWindowTitle("软件说明")
        msg.setText("这是一个TIC分析软件：\n"
                    "1，打开连续扫描的动态增强序列文件和勾画的mask文件，其中dicom文件为.dcm格式，勾画文件为.nii或者.nii.gz格式;"
                    "其中Serial number可以控制目前窗口展示的序列，滑动条可以控制mask的透明度，鼠标滚轮可以同时对dicom文件和mask文件翻页\n"
                    "2，点击run按钮可对ROI内的区域进行TIC分析，分析完成后会在右边窗口展示分析结果，鼠标滚轮可对其上下翻页，其翻页将和dicom文件和mask文件的翻页同步\n"
                    "3，点击show_table按钮可以计算出ROI内的各型血管翳的容积以及所占百分比\n"
                    "4，点击show_piechart按钮可对计算出的百分比结果绘制饼图\n"
                    "5，其中图片，表格，饼图都可以点击相应的按钮进行保存，保存路径可选择")
        msg.exec_()

    def get_mask(self):
        file,_=QFileDialog.getOpenFileName(self,"打开文件","","NIFTI文件(*.nii *.nii.gz)")
        if  not file:
            return
        mask_img = sitk.ReadImage(file)
        self.mask_data = sitk.GetArrayFromImage(mask_img)
        self.mask_data[self.mask_data != 0] = 1
       # print(self.mask_data.shape)


    def get_imgDir(self):
        self.imgDir = QFileDialog.getExistingDirectory(self.centralwidget,"选择目录","./",QFileDialog.ShowDirsOnly)
        if not self.imgDir:
            return
        self.get_filename()

    def get_filename(self):
        self.folder_names =sorted([d for d in os.listdir(self.imgDir) if os.path.isdir(os.path.join(self.imgDir,d)) and d.isdigit()])
        self.comboBox.addItems(self.folder_names)
        self.comboBox.currentIndexChanged.connect(self.change_folder)
        # self.change_folder(str(self.folder_names[0]))
        self.comboBox.setCurrentIndex(0)
        self.change_folder(0)

    def change_folder(self,index):
        #切换文件夹
        self.folder_name = self.folder_names[index]
        reader = sitk.ImageSeriesReader()
        #dicom_names = reader.GetGDCMSeriesFileNames(self.imgDir+'/'+self.folder_name)
        dicom_names = reader.GetGDCMSeriesFileNames(os.path.join(self.imgDir + '/' + self.folder_name))
        reader.SetFileNames(dicom_names)
        image = reader.Execute()
        self.spacing = image.GetSpacing()
        self.dicom_array = sitk.GetArrayFromImage(image)
        alpha = self.horizontalSlider.value()/100.0
        self.show_dicom(self.slice,alpha)

    def update_opacity(self,value):
        if not hasattr(self,'dicom_array'):
            pass
        else:
            alpha = value/100.0
            self.cmap = ListedColormap('none',(1,0,0,1-alpha))
            self.show_dicom(self.slice,alpha)


    def show_dicom(self,slice,alpha):
        self.cmap = ListedColormap(['none', 'red'])
        self.slice = slice
        self.image_array = np.squeeze(self.dicom_array)
       # print(self.image_array.shape)
        self.fig = self.F2.figure
        self.fig.clear()
        self.ax = self.fig.subplots()
        self.ax.imshow(self.image_array[slice], cmap='gray')
        if hasattr(self,'pred_data'):
            self.ax.imshow(self.pred_data[slice], cmap=self.cmap,alpha = alpha )
        if hasattr(self, 'mask_data'):
            self.ax.imshow(self.mask_data[slice], cmap=self.cmap, alpha=alpha)

        self.ax.axis('off')
        self.fig.canvas.draw()

    def wheelEvent(self, event):
        if not hasattr(self,'dicom_array'):
            pass
        else:
            if event.angleDelta().y() > 0 and self.slice > 0:
                self.slice -= 1
            elif event.angleDelta().y() < 0 and self.slice < self.dicom_array.shape[0] - 1:
                self.slice += 1
            alpha = self.horizontalSlider.value() / 100.0
            self.show_dicom(self.slice, alpha)
            if hasattr(self,'images'):
                self.show_img(self.slice)


    def process_image(self):
        if not hasattr(self,'imgDir'):
            QMessageBox.warning(self,'warning','No loaded dicom!')
        else:
            self.get_imagePathList()


    def get_imagePathList(self):
        self.imagePathList = []
        self.imageDataList = np.array([])
        for file in natsorted(os.listdir(self.imgDir), alg=ns.PATH):
            self.imagePath = join(self.imgDir, file)
            self.imagePathList.append(self.imagePath)
        self.get_imageDataList()

    def get_imageDataList(self):  ##原始图片转化为（7，12，640，640）矩阵

        self.imageDataList = np.array([])
        for i, file in enumerate(self.imagePathList):
            reader = sitk.ImageSeriesReader()
            dicom_names = reader.GetGDCMSeriesFileNames(file)
            reader.SetFileNames(dicom_names)
            img = reader.Execute()
            data = sitk.GetArrayFromImage(img)
            data = np.expand_dims(data, 0)

            if i == 0:
                self.imageDataList = data

            else:
                self.imageDataList = np.append(self.imageDataList, data, axis=0)

            if hasattr(self,'pred_data'):
                self.imageDataList = np.multiply(self.imageDataList, self.pred_data)
            if hasattr(self,'mask_data'):
                self.imageDataList = np.multiply(self.imageDataList, self.mask_data)
            #     print('2')

        self.get_sliceDataList()



    def get_sliceDataList(self):  ##转置为（12，7，640，640）矩阵
        self.sliceDataList = self.imageDataList.transpose([1, 0, 2, 3])
        #print(self.sliceDataList.shape)
        self.get_msdList()

    def get_msdList(self):
        self.msdList = np.array([])
        for i in range(self.sliceDataList.shape[0]):
            msd = np.amax(self.sliceDataList[i], axis=0) - np.amin(self.sliceDataList[i], axis=0)
            msd = np.expand_dims(msd, 0)
            if i == 0:
                self.msdList = msd
            else:
                self.msdList = np.append(self.msdList, msd, axis=0)

        #print(self.msdList.shape)
        self.get_msiList()

    def get_msiList(self):
        self.msiList = np.array([])
        for i in range(self.sliceDataList.shape[0]):
            self.msi = (np.array(self.sliceDataList[i][1]).astype(int) - np.array(self.sliceDataList[i][0]).astype(int)) / 80
            self.msi = np.expand_dims(self.msi, 0)
            if i == 0:
                self.msiList = self.msi
            else:
                self.msiList = np.append(self.msiList, self.msi, axis=0)

        #print(self.msiList.shape)
        self.get_indeList()

    def get_indeList(self):
        self.indeList = np.array([])
        for i in range(self.sliceDataList.shape[0]):
            inde = self.sliceDataList[i].argmax(axis=0) + 1
            inde = np.expand_dims(inde, 0)
            if i == 0:
                self.indeList = inde
            else:
                self.indeList = np.append(self.indeList, inde, axis=0)
       # print(self.indeList.shape)
        self.get_RelFsList()

    def get_RelFsList(self):
        def fit(data_x, data_y):
            m = len(data_y)
            x_bar = np.mean(data_x)
            sum_yx = 0
            sum_x2 = 0
            sum_delta = 0
            for i in range(m):
                x = data_x[i]
                y = data_y[i]
                sum_yx += y * (x - x_bar)
                sum_x2 += x ** 2
            # 根据公式计算w
            w = sum_yx / (sum_x2 - m * (x_bar ** 2))

            for i in range(m):
                x = data_x[i]
                y = data_y[i]
                sum_delta += (y - w * x)
            b = sum_delta / m
            return w, b
        self.RelFsList = np.array([])
        for i in range(self.sliceDataList.shape[0]):
            y = self.sliceDataList[i][3:7]
            x = np.array([4, 5, 6, 7])
            RelFs, b = fit(x, y)
            RelFs = np.expand_dims(RelFs, 0)
            if i == 0:
                self.RelFsList = RelFs
            else:
                self.RelFsList = np.append(self.RelFsList, RelFs, axis=0)

        #print(self.RelFsList)
        self.get_RelList()

    def get_RelList(self):
        self.RelList = np.array([])
        for i in range(self.sliceDataList.shape[0]):
            Rel = np.divide(self.RelFsList[i], self.msdList[i], out=np.zeros_like(self.RelFsList[i]), where=self.msdList[i] != 0)
            Rel = np.expand_dims(Rel, 0)
            if i == 0:
                self.RelList = Rel
            else:
                self.RelList = np.append(self.RelList, Rel, axis=0)

        #print(self.RelList)
        self.get_oneList()

    def get_oneList(self):
        a1 = np.copy(self.msiList)
        b1 = np.copy(self.indeList)
        c1 = np.copy(self.RelList)
        self.oneList = np.array([])
        for i in range(self.sliceDataList.shape[0]):
            a1[i][a1[i] < 0] = 2
            a1[i] = np.where(a1[i] < 0.1, 1, 0)
            b1[i] = np.where(b1[i] > 3, 1, 0)
            c1[i] = np.where(c1[i] > -0.15, 1, 0)
            self.oneList = np.multiply(a1, b1)
            self.oneList = np.multiply(self.oneList, c1)
            self.oneList = self.oneList.astype(int)


        #print(self.oneList)
        self.get_twoList()

    def get_twoList(self):
        a2 = np.copy(self.msiList)
        b2 = np.copy(self.indeList)
        c2 = np.copy(self.RelList)
        self.twoList = np.array([])

        for i in range(self.sliceDataList.shape[0]):
            a2[i] = np.where(a2[i] > 0.1, 1, 0)
            b2[i][b2[i] < 1] = 79
            b2[i] = np.where(b2[i] < 5, 1, 0)
            c2[i] = np.where(c2[i] < -0.015, 1, 0)
            self.twoList = np.multiply(a2, b2)
            self.twoList = np.multiply(self.twoList, c2)
            self.twoList = self.twoList.astype(int)
            self.twoList = 2 * self.twoList
        #print(self.twoList)
        self.get_threeList()

    def get_threeList(self):
        a3 = np.copy(self.msiList)
        b3 = np.copy(self.indeList)
        c3 = np.copy(self.RelList)
        self.threeList = np.array([])
        for i in range(self.sliceDataList.shape[0]):
            a3[i] = np.where(a3[i] > 0.1, 1, 0)
            b3[i] = np.where(b3[i] > 1, 1, 0)
            c3[i][c3[i] < -0.015] = 79
            c3[i] = np.where(c3[i] < 0.015, 1, 0)
            self.threeList = np.multiply(a3, b3)
            self.threeList = np.multiply(self.threeList, c3)
            self.threeList = self.threeList.astype(int)
            self.threeList = 3 * self.threeList

        self.get_fourList()

    def get_fourList(self):
        a4 = np.copy(self.msiList)
        b4 = np.copy(self.indeList)
        c4 = np.copy(self.RelList)
        self.fourList = np.array([])
        for i in range(self.sliceDataList.shape[0]):
            a4[i] = np.where(a4[i] > 0.1, 1, 0)
            b4[i] = np.where(b4[i] > 3, 1, 0)
            c4[i] = np.where(c4[i] > 0.015, 1, 0)
            self.fourList = np.multiply(a4, b4)
            self.fourList = np.multiply(self.fourList, c4)
            self.fourList = self.fourList.astype(int)
            self.fourList = 4 * self.fourList

        self.get_imgList()

    def get_imgList(self):

        self.imgList = self.twoList + self.threeList + self.oneList + self.fourList
        self.get_analysisDataList()

    def get_analysisDataList(self):
        self.msdList[self.msdList != 0] = 1
        for i in range(self.imageDataList.shape[0]):
            self.imageDataList[i] = np.multiply(self.imageDataList[i], self.msdList)
        self.analysisDataList = self.imageDataList.transpose([1, 2, 3, 0])
       # print(self.analysisDataList)
        self.res_img()


    def res_img(self):
        def regenerate_img(img):
            row, col = img.shape
            y = np.zeros((row, col))
            cmap = plt.cm.gray
            norm = plt.Normalize(y.min(), y.max())
            rgba = cmap(norm(y))
            for i in range(0, row):
                for j in range(0, col):
                    if img[i, j] == 1:

                        rgba[i, j, :3] = 0, 0, 1

                    elif img[i, j] == 2:
                        rgba[i, j, :3] = 1, 0, 0

                    elif img[i, j] == 3:
                        rgba[i, j, :3] = 0, 1, 0
                    elif img[i, j] == 4:
                        rgba[i, j, :3] = 1, 1, 0

            return rgba

        img_list = []
        for i in range(self.sliceDataList.shape[0]):
            self.img = np.array(self.imgList[i])
            self.res = regenerate_img(self.img)
            img_list.append(self.res)
        self.images = np.stack(img_list,axis=0)
       # print(images.shape)
        self.show_img(self.slice)

    def show_img(self,slice):
        self.fig = self.F1.figure
        self.fig.clear()
        self.ax = self.fig.subplots()
        self.ax.imshow(self.images[slice])
        self.ax.axis('off')
        self.fig.canvas.draw()


    def save_img(self):
        self.current_dir = os.path.dirname(os.path.abspath(sys.argv[0]))
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        file_name, _ = QFileDialog.getSaveFileName(self, "保存文件", "", "所有文件 (*);;文本文件 (*.txt)", options=options)
        if file_name:
            # 获取保存路径和文件夹名字
            save_path, folder_name = os.path.split(file_name)

            # 如果保存路径不存在，则创建
            if not os.path.exists(save_path):
                os.makedirs(save_path)

            # 拼接新的保存路径，包含文件夹名字
            save_path = os.path.join(save_path, folder_name)

            # 如果文件夹不存在，则创建
            if not os.path.exists(save_path):
                os.makedirs(save_path)

            # 遍历每个切片并保存
            for i, slice in enumerate(self.images):
                fig = plt.figure(figsize=(10, 10))
                plt.imshow(slice)
                plt.axis('off')
                plt.savefig(os.path.join(save_path, f'{i + 1}.jpg'), bbox_inches='tight')
                plt.close(fig)



    def tabel(self):
        if not hasattr(self,'threeList'):
            QMessageBox.warning(self,'warning','Please run first!')
        else:
            self.show_tabel()


    def show_tabel(self):
        self.one_volume = int(np.count_nonzero(self.oneList)*self.spacing[0]*self.spacing[1]*self.spacing[2])
        self.two_volume = int(np.count_nonzero(self.twoList) * self.spacing[0] * self.spacing[1]*self.spacing[2])
        self.three_volume = int(np.count_nonzero(self.threeList) * self.spacing[0] * self.spacing[1]*self.spacing[2])
        self.four_volume = int(np.count_nonzero(self.fourList) * self.spacing[0] * self.spacing[1]*self.spacing[2])
        self.percent_one ='{:.2%}'.format( self.one_volume/(self.one_volume+self.two_volume+self.three_volume+self.four_volume))
        self.percent_two = '{:.2%}'.format(self.two_volume / (self.one_volume + self.two_volume + self.three_volume + self.four_volume))
        self.percent_three = '{:.2%}'.format(self.three_volume / (self.one_volume + self.two_volume + self.three_volume + self.four_volume))
        self.percent_four = '{:.2%}'.format(self.four_volume / (self.one_volume + self.two_volume + self.three_volume + self.four_volume))
        # #设置表格内容

        self.tableWidget.setItem(0,0,QTableWidgetItem("Pannus type"))
        self.tableWidget.setItem(1, 0, QTableWidgetItem("SE"))
        self.tableWidget.setItem(2, 0, QTableWidgetItem("FEQW"))
        self.tableWidget.setItem(3, 0, QTableWidgetItem("FESP"))
        self.tableWidget.setItem(4, 0, QTableWidgetItem("FESC"))
        self.tableWidget.setItem(0, 1, QTableWidgetItem("Volume(mm3)"))
        self.tableWidget.setItem(0, 2, QTableWidgetItem("Percentage of volume"))
        self.tableWidget.setItem(1, 1, QTableWidgetItem(str(self.one_volume)))
        self.tableWidget.setItem(2, 1, QTableWidgetItem(str(self.two_volume)))
        self.tableWidget.setItem(3, 1, QTableWidgetItem(str(self.three_volume)))
        self.tableWidget.setItem(4, 1, QTableWidgetItem(str(self.four_volume)))
        self.tableWidget.setItem(1, 2, QTableWidgetItem(str(self.percent_one)))
        self.tableWidget.setItem(2, 2, QTableWidgetItem(str(self.percent_two)))
        self.tableWidget.setItem(3, 2, QTableWidgetItem(str(self.percent_three)))
        self.tableWidget.setItem(4, 2, QTableWidgetItem(str(self.percent_four)))

        self.tableWidget.show()#显示表格
 #       self.tableWidget.setStyleSheet("background-color:rgba(0,0,0,0)，border-left:none;border-top:none;")  #设置表格背景为透明

    def save_table_to_csv(self, table_widget, file_path):
        rows = table_widget.rowCount()
        cols = table_widget.columnCount()
        with open(file_path, 'w', newline='') as csv_file:
            writer = csv.writer(csv_file)
            for row in range(rows):
                csv_row = []
                for col in range(cols):
                    item = table_widget.item(row, col)
                    if item is not None:
                        csv_row.append(item.text())
                    else:
                        csv_row.append('')
                writer.writerow(csv_row)

    def on_save_button_clicked(self):
        file_name, _ = QFileDialog.getSaveFileName(self, "保存文件", "", "CSV 文件 (*.csv)")
        if file_name:
            self.save_table_to_csv(self.tableWidget, file_name)

    def piechart(self):
        if not hasattr(self,'percent_four'):
            QMessageBox.warning(self,'warning','Please show table first!')
        else:
            self.creat_piechart()

    def creat_piechart(self):
        pie_data = [float(self.percent_one.strip('%')),float(self.percent_two.strip('%')),float(self.percent_three.strip('%')),float(self.percent_four.strip('%'))]
  #      pie_data = ['{:.2%}'.format(15.00), '{:.2%}'.format(15.00), '{:.2%}'.format(30.00), '{:.2%}'.format(40.00)]

        labels = ['SE','FEQW','FESP','FESC']
        colors = ['blue','red','green','yellow']
        explode = [0,0.1,0,0]

        fig = plt.gcf()
        fig.set_size_inches(self.label_2.width() / fig.dpi, self.label_2.height() / fig.dpi)

        ax = plt.gca()
        ax.set_position([0, 0, 1, 1])
        ax.set_aspect('equal')

        ax.clear()
        # self.label_2.clear()
        # plt.clf()
        # plt.close()
        ax.pie(pie_data,explode=explode, labels=labels, colors=colors, autopct='%1.1f%%')

        # 将饼图保存到内存中的二进制数据
        buffer = io.BytesIO()
        plt.savefig(buffer, format='jpg')
        buffer.seek(0)
        image = QtGui.QImage.fromData(buffer.getvalue())

        # 将二进制数据转换为图像并显示在 label_2 中
        self.pixmap = QtGui.QPixmap.fromImage(image)
        self.label_2.setPixmap(self.pixmap)

    def save_piechart(self):
        #file_name, _ = QFileDialog.getSaveFileName(self, "保存文件", "", "PNG 文件 (*.png);;JPEG 文件 (*.jpg *.jpeg)")
        file_name, _ = QFileDialog.getSaveFileName(self, "保存文件", "", "JPEG 文件 (*.jpg *.jpeg)")
        if file_name:
            plt.savefig(file_name,bbox_inches='tight')



    def Exit(self):
        #创建一个询问框
        reply = QMessageBox.question(self,'Exit','Are you sure to quit?',QMessageBox.Yes | QMessageBox.No,QMessageBox.No)
        if reply == QMessageBox.Yes:
            self.close()
        else:
            pass

    def closeEvent(self,event):
        reply = QMessageBox.question(self, 'Exit', 'Are you sure to quit?', QMessageBox.Yes | QMessageBox.No,
                                     QMessageBox.No)
        if reply == QMessageBox.Yes:
            event.accept()
        else:
            event.ignore()


if __name__ == "__main__":

    app = QtWidgets.QApplication(sys.argv)  # 创建一个QApplication，也就是你要开发的软件app
    MainWindow = QtWidgets.QMainWindow()  # 创建一个QMainWindow，用来装载你需要的各种组件、控件
    ui = TIC()  # ui是Ui_MainWindow()类的实例化对象
    ui.setupUi(MainWindow)  # 执行类中的setupUi方法，方法的参数是第二步中创建的QMainWindow
    ui.show()  # 执行QMainWindow的show()方法，显示这个QMainWindow
    sys.exit(app.exec_())  # 使用exit()或者点击关闭按钮退出QApplicat
